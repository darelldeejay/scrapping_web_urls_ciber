name: status-check

on:
  workflow_dispatch:
    inputs:
      send_channels:
        description: "Dónde enviar"
        required: true
        default: "both"   # telegram, teams, both, none
        type: choice
        options: [none, telegram, teams, both]
      dry_run:
        description: "Solo previsualización (no envía)"
        required: true
        default: "true"
        type: boolean
      also_text:
        description: "Incluir versión de texto en el mensaje (compat; no necesario)"
        required: false
        default: "false"
        type: boolean
      impacto_override:
        description: "Impacto en servicios del cliente (override opcional)"
        required: false
        default: ""
        type: string
      accion_override:
        description: "Acción sugerida (override opcional)"
        required: false
        default: ""
        type: string
  schedule:
    # 08:30 Madrid (CEST/CET)
    - cron: "30 6 * * *"
    - cron: "30 7 * * *"

concurrency:
  group: dora-status-${{ github.ref }}
  cancel-in-progress: true

jobs:
  vendors:
    name: Scraping vendors (solo export JSON)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        vendor: [netskope, proofpoint, qualys, aruba, imperva, cyberark, trendmicro, guardicore]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare out dirs
        run: mkdir -p .github/out/vendors

      # ⛔️ Ya NO enviamos mensajes por vendor; solo exportamos JSON
      - name: Export ${{ matrix.vendor }} to JSON (no notify)
        run: |
          python run_vendor.py --vendor ${{ matrix.vendor }} --export-json ".github/out/vendors/${{ matrix.vendor }}.json" || true

      - name: Upload vendor summary (per-vendor artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vendor-${{ matrix.vendor }}
          path: .github/out/vendors/${{ matrix.vendor }}.json
          if-no-files-found: ignore
          retention-days: 7

  digest:
    name: Build & send digest (Telegram=texto, Teams=HTML)
    runs-on: ubuntu-latest
    needs: vendors
    if: always()
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download vendor summaries (merge all)
        uses: actions/download-artifact@v4
        with:
          pattern: vendor-*
          merge-multiple: true
          path: .github/out/vendors
        continue-on-error: true

      - name: Build digest data JSON
        run: |
          python scripts/build_digest_data.py \
            --vendors-dir .github/out/vendors \
            --out .github/out/digest_data.json \
            ${ { '': '' } } # placeholder no-op

      - name: Compute flags
        id: flags
        run: |
          CHANNELS="${{ inputs.send_channels }}"
          [ -z "$CHANNELS" ] && CHANNELS="both"
          DRY="${{ inputs.dry_run }}"
          [ -z "$DRY" ] && DRY="false"
          ALSO="${{ inputs.also_text }}"
          [ -z "$ALSO" ] && ALSO="false"
          IMPACTO="${{ inputs.impacto_override }}"
          ACCION="${{ inputs.accion_override }}"

          echo "CHANNELS=$CHANNELS" >> $GITHUB_ENV
          echo "NOTIFY_DRY_RUN=$DRY" >> $GITHUB_ENV
          echo "ALSO_TEXT=$ALSO" >> $GITHUB_ENV

          # Si hay overrides, creamos un pequeño JSON para que run_digest lo absorba
          if [ -n "$IMPACTO" ] || [ -n "$ACCION" ]; then
            echo "{\"IMPACTO_CLIENTE_SI_NO\":\"$IMPACTO\",\"ACCION_SUGERIDA\":\"$ACCION\"}" > .github/out/overrides.json
            echo "OVERRIDES_PATH=.github/out/overrides.json" >> $GITHUB_ENV
          else
            echo "OVERRIDES_PATH=" >> $GITHUB_ENV
          fi

      - name: Merge overrides (optional)
        if: env.OVERRIDES_PATH != ''
        run: |
          python - << 'PY'
          import json, sys
          base = json.load(open(".github/out/digest_data.json","r",encoding="utf-8"))
          over = json.load(open(".github/out/overrides.json","r",encoding="utf-8"))
          base.update({k:v for k,v in over.items() if v != ""})
          json.dump(base, open(".github/out/digest_data.json","w",encoding="utf-8"), ensure_ascii=False, indent=2)
          PY

      - name: Send or preview digest
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_USER_ID: ${{ secrets.TELEGRAM_USER_ID }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          NOTIFY_DRY_RUN: ${{ env.NOTIFY_DRY_RUN }}
        run: |
          CMD="python run_digest.py \
            --text-template templates/dora_email.txt \
            --html-template templates/dora_email.html \
            --data .github/out/digest_data.json \
            --channels \"$CHANNELS\""
          # Compatibilidad (no hace nada, pero el script acepta la flag)
          if [ "$ALSO_TEXT" = "true" ]; then
            CMD="$CMD --also-text"
          fi
          if [ "$NOTIFY_DRY_RUN" = "true" ]; then
            CMD="$CMD --preview-out .github/out/preview"
          fi
          echo "[RUN] $CMD"
          eval $CMD

      - name: Upload digest preview
        if: env.NOTIFY_DRY_RUN == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: digest-preview
          path: |
            .github/out/preview/**
            .github/out/digest_data.json
          if-no-files-found: error
